# Car Rental API

A RESTful API for managing vehicle rentals, built with Go, Fiber, and PostgreSQL.

## Features

- User authentication with JWT
- Vehicle management
- Rental booking system
- Real-time vehicle status tracking
- Battery level monitoring
- Location-based vehicle search

## Tech Stack

- **Backend Framework**: [Fiber](https://github.com/gofiber/fiber) v2.52.6
- **Database**: PostgreSQL 15.3
- **ORM**: GORM v1.26.1
- **Authentication**: JWT (github.com/golang-jwt/jwt/v5)
- **Environment Variables**: godotenv
- **Containerization**: Docker & Docker Compose

## Prerequisites

- Go 1.23.2 or later
- Docker and Docker Compose
- PostgreSQL (if running locally)

## Project Structure
├── config/ # Configuration and database setup
├── controllers/ # Request handlers
├── middlewares/ # Custom middleware functions
├── models/ # Database models
├── repositories/ # Database operations
├── routes/ # API route definitions
├── utils/ # Utility functions
├── app.env # Environment variables
├── docker-compose.yml
├── Dockerfile
├── main.go # Application entry point
└── wait-for.sh # Database connection script



## Setup Instructions

1. **Clone the repository**
   ```bash
   git clone <repository-url>
   cd car_rental_api
   ```

2. **Environment Setup**
   - Copy `app.env.example` to `app.env` (if not exists)
   - Update the environment variables in `app.env`:
     ```
     DB_HOST=localhost
     DB_USER=postgres
     DB_PASSWORD=dev2654
     DB_NAME=vehicle_rental_db
     DB_PORT=5432
     JWT_SECRET=your-secret-key
     ```

3. **Using Docker (Recommended)**
   ```bash
   # Build and start the containers
   docker-compose up --build

   # To run in detached mode
   docker-compose up -d
   ```

4. **Manual Setup**
   ```bash
   # Install dependencies
   go mod download

   # Run the application
   go run main.go
   ```

## API Endpoints

### Authentication
- `POST /auth/register` - Register a new user
- `POST /auth/login` - User login

### Vehicles
- `GET /api/vehicles` - List all vehicles
- `GET /api/vehicles/:id` - Get vehicle details
- `POST /api/vehicles/:id/rent` - Rent a vehicle

### User
- `GET /api/profile/:id` - Get user profile

## Development Notes

### Database
- The application uses PostgreSQL with GORM as the ORM
- Database migrations are handled automatically by GORM
- The database schema is defined in the `models` package

### Authentication
- JWT-based authentication
- Tokens expire after 24 hours
- Protected routes require the `Authorization` header with a Bearer token

### Docker
- Multi-stage build for smaller final image
- Uses Alpine Linux for the base image
- Includes wait-for script to ensure database availability

## Environment Variables

| Variable | Description | Default |
|----------|-------------|---------|
| DB_HOST | Database host | localhost |
| DB_USER | Database user | postgres |
| DB_PASSWORD | Database password | - |
| DB_NAME | Database name | vehicle_rental_db |
| DB_PORT | Database port | 5432 |
| JWT_SECRET | Secret key for JWT | - |

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the LICENSE file for details.